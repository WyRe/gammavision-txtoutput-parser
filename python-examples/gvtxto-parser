#!/bin/bash


usage () {
    printf '%s\n\n' "Usage: $0 [-i </input/file/path>] [-o </output/file/path>]"    
    printf '%s\t%s\n' "-i" "input file path, it does admit absolute or relative paths"
    printf '%s\t%s\n' "-o" "output file path, a name must be specified, also admits absolute or relative paths"
    printf '%s\t%s\n' "-v" "prints software version"
    printf '%s\t%s\n\n' "-h" "it shows this help"
    exit 1;
}


while getopts ":i:o:vh" opt; do
    case "${opt}" in
        i) 
            inputfile=$OPTARG
            printf '%s\n%s\n%s\n' "Captured input file option -i" "Input file is:" "$inputfile"
            ;;
        o) 
            outputfile=$OPTARG
            printf '%s\n%s\n%s\n' "Captured output file option -o" "Output file is:" "$outputfile"
            ;;
        v) 
            printf 'Script version:\t v1.0\n'
            ;;
        h) 
            usage 
            ;;
       \?)  printf 'Invalid option -%s\n' "$OPTARG"
            exit 1 
            ;;
        :)  printf 'Option -%s requires an argument\n' "$OPTARG"
            exit 1 
            ;;
        *) 
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ -z "$inputfile" ] || [ -z "$outputfile" ]
then
    usage
else
    gawk '$1 ~ /^[0-9]+:$/ {for(i=1;i<=NF;i++) if (i!=1) print $i}' "$inputfile" > "$outputfile"
fi

# It shows help when a non valid character is introduced by user as argument
if [ -n "$1" ]
then
    usage
fi

